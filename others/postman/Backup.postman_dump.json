{
	"version": 1,
	"collections": [
		{
			"id": "c97db7cd-59c4-7fde-1062-52bcd198bd12",
			"name": "MANUAL",
			"description": "",
			"order": [],
			"folders": [
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481305345,
					"collection": "c97db7cd-59c4-7fde-1062-52bcd198bd12",
					"folder": null,
					"id": "8d757ef0-504c-9bf2-99cf-f009374f1b31",
					"name": "Email",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"665e83a8-dd9d-5a08-4569-c84abefd75a6"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:08:06.000Z",
					"updatedAt": "2018-03-23T14:08:16.000Z",
					"write": true,
					"collection_id": "c97db7cd-59c4-7fde-1062-52bcd198bd12"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 2757650033,
					"collection": "c97db7cd-59c4-7fde-1062-52bcd198bd12",
					"folder": null,
					"id": "01c1fc0e-6790-566d-52ad-e65605124859",
					"name": "Recipe",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"8fd4554a-9377-7cc2-1d6a-2e70f819a06c",
						"04493831-f3e5-3049-749d-ed9a8639bff7"
					],
					"folders_order": [],
					"createdAt": "2017-12-07T10:36:27.000Z",
					"updatedAt": "2017-12-07T10:55:16.000Z"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481305379,
					"collection": "c97db7cd-59c4-7fde-1062-52bcd198bd12",
					"folder": null,
					"id": "cd0d701b-52de-ccfc-c084-b4fe08c8e073",
					"name": "User",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"f84f5f6f-3a49-a97d-012d-ad590d07fc50"
					],
					"folders_order": [],
					"createdAt": "2018-01-08T13:07:40.000Z",
					"updatedAt": "2018-03-23T14:08:16.000Z"
				}
			],
			"folders_order": [
				"01c1fc0e-6790-566d-52ad-e65605124859",
				"cd0d701b-52de-ccfc-c084-b4fe08c8e073",
				"8d757ef0-504c-9bf2-99cf-f009374f1b31"
			],
			"timestamp": 0,
			"synced": true,
			"remote_id": "0",
			"owner": "833319",
			"sharedWithTeam": false,
			"subscribed": false,
			"remoteLink": "",
			"remoteLinkUpdatedAt": null,
			"public": false,
			"createdAt": "2017-12-07T10:36:26.000Z",
			"updatedAt": 1524675578328,
			"write": true,
			"published": false,
			"favorite": false,
			"permissions": {},
			"syncedPermissions": {},
			"requests": [
				{
					"id": "04493831-f3e5-3049-749d-ed9a8639bff7",
					"headers": "x-api-key: {{api_key_web}}\nx-app-unique-id: {{app_unique_id}}\n",
					"headerData": [
						{
							"key": "x-api-key",
							"value": "{{api_key_web}}",
							"description": "",
							"enabled": true
						},
						{
							"key": "x-app-unique-id",
							"value": "{{app_unique_id}}",
							"enabled": true
						}
					],
					"url": "{{URL}}public/Controller.php",
					"folder": "01c1fc0e-6790-566d-52ad-e65605124859",
					"queryParams": [],
					"preRequestScript": "postman.setEnvironmentVariable(\"id\", randomNumber(2));\r\n\r\n\r\nfunction randomNumber(length) {\r\n  var text = \"\";\r\n  var possible = \"0123456789\";\r\n\r\n  for (var i = 0; i < length; i++)\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n  return text;\r\n}\r\n",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [
						{
							"key": "function_key",
							"value": "RECIPE_SUBMIT",
							"type": "text",
							"enabled": true
						},
						{
							"key": "rcp_nm",
							"value": "TEST_RECIPE_NAME - {{id}}",
							"type": "text",
							"enabled": true
						},
						{
							"key": "food_csn_id",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "food_typ_id",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "user_id",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "rcp_steps[]",
							"value": "This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. This is a step 1. ",
							"type": "text",
							"enabled": true
						},
						{
							"key": "rcp_steps[]",
							"value": "This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. This is a step 2. \n",
							"type": "text",
							"enabled": true
						},
						{
							"key": "rcp_steps[]",
							"value": "This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. This is a step 3. ",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_aka_id[]",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_aka_id[]",
							"value": "2"
						},
						{
							"key": "ing_aka_name[]",
							"value": "TEST INGREDIENT 1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_aka_name[]",
							"value": "TEST INGREDIENT 2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "qty_id[]",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "qty_id[]",
							"value": "2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_qty[]",
							"value": "5",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_qty[]",
							"value": "6",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_id[]",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_id[]",
							"value": "2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_id[]",
							"value": "3",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_qty[]",
							"value": "4",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_qty[]",
							"value": "3",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_qty[]",
							"value": "2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "images[]",
							"value": null,
							"type": "file",
							"enabled": true
						},
						{
							"key": "images[]",
							"value": null,
							"type": "file",
							"enabled": true
						},
						{
							"key": "rcp_id",
							"value": "{{rcp_id}}",
							"type": "text",
							"enabled": true
						}
					],
					"dataMode": "params",
					"tests": "var STATUS_CODE = parseInt(postman.getEnvironmentVariable(\"STATUS_CODE\"));\nvar RESPONSE_TIME = parseInt(postman.getEnvironmentVariable(\"RESPONSE_TIME_LONG\"));\nvar STRING = \"err_message\";\n\ntests[\"Status Code : expected=\"+STATUS_CODE+\" & recieved=\"+responseCode.code] = responseCode.code === STATUS_CODE;\n\ntests[\"Response Time : expected<\"+RESPONSE_TIME+\" & recieved=\"+responseTime] = responseTime < RESPONSE_TIME;\n\ntests[\"Response in JSON : expected=true & recieved=\"+isJson(responseBody)] = isJson(responseBody);\n\ntests[\"Response has String(\"+STRING+\") : expected=true & recieved=\"+responseBody.has(STRING)] = responseBody.has(STRING);\n\nfunction isJson(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nif(isJson(responseBody)){\n    var jsonData = JSON.parse(responseBody);\n    tests[\"Response has error : expected=false & recieved=\"+jsonData.isError] = jsonData.isError === false;\n}",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1524675577626,
					"name": "RECIPE_SUBMIT(UPDATE)",
					"description": null,
					"collectionId": "c97db7cd-59c4-7fde-1062-52bcd198bd12",
					"responses": []
				},
				{
					"id": "665e83a8-dd9d-5a08-4569-c84abefd75a6",
					"headers": "x-api-key: {{api_key_web}}\nx-app-unique-id: {{app_unique_id}}\n",
					"headerData": [
						{
							"key": "x-api-key",
							"value": "{{api_key_web}}",
							"description": "",
							"enabled": true
						},
						{
							"key": "x-app-unique-id",
							"value": "{{app_unique_id}}",
							"enabled": true
						}
					],
					"url": "{{URL}}public/EmailController.php",
					"folder": "8d757ef0-504c-9bf2-99cf-f009374f1b31",
					"queryParams": [],
					"preRequestScript": "postman.setEnvironmentVariable(\"phone\", randomNumber(10));\r\n\r\nfunction randomNumber(length) {\r\n  var text = \"\";\r\n  var possible = \"0123456789\";\r\n\r\n  for (var i = 0; i < length; i++)\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n  return text;\r\n}",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [
						{
							"key": "function_key",
							"value": "SEND_EMAIL",
							"type": "text",
							"enabled": true
						},
						{
							"key": "from",
							"value": "MAIL_FROM_TEAM_COOKERY",
							"type": "text",
							"enabled": true
						},
						{
							"key": "recipient_emails[]",
							"value": "ajitkamathk@gmail.com",
							"description": "",
							"type": "text",
							"enabled": true
						},
						{
							"key": "recipient_emails[]",
							"value": "ajith_kamath@syntelinc.com",
							"description": "",
							"type": "text",
							"enabled": true
						},
						{
							"key": "recipient_names[]",
							"value": "Ajit's Personal",
							"description": "",
							"type": "text",
							"enabled": true
						},
						{
							"key": "recipient_names[]",
							"value": "Ajit's Official",
							"description": "",
							"enabled": true
						},
						{
							"key": "bodies[]",
							"value": "Test Email Body - {{$randomInt}}",
							"description": "",
							"type": "text",
							"enabled": true
						},
						{
							"key": "bodies[]",
							"value": "Test Email Body - {{$randomInt}}",
							"description": "",
							"type": "text",
							"enabled": true
						},
						{
							"key": "subject",
							"value": "Test Email Subject - {{$randomInt}}",
							"description": "",
							"type": "text",
							"enabled": true
						},
						{
							"key": "attachments[]",
							"value": null,
							"description": "",
							"type": "file",
							"enabled": true
						},
						{
							"key": "attachments[]",
							"value": null,
							"description": "",
							"type": "file"
						}
					],
					"dataMode": "params",
					"tests": "var STATUS_CODE = parseInt(postman.getEnvironmentVariable(\"STATUS_CODE\"));\nvar RESPONSE_TIME = parseInt(postman.getEnvironmentVariable(\"RESPONSE_TIME_MEDIUM\"));\nvar STRING = \"err_code\";\n\ntests[\"Status Code : expected=\"+STATUS_CODE+\" & recieved=\"+responseCode.code] = responseCode.code === STATUS_CODE;\n\ntests[\"Response Time : expected<\"+RESPONSE_TIME+\" & recieved=\"+responseTime] = responseTime < RESPONSE_TIME;\n\ntests[\"Response in JSON : expected=true & recieved=\"+isJson(responseBody)] = isJson(responseBody);\n\ntests[\"Response has String(\"+STRING+\") : expected=true & recieved=\"+responseBody.has(STRING)] = responseBody.has(STRING);\n\nfunction isJson(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1524675575433,
					"name": "SEND_MAIL(TEAM COOKERY)",
					"description": null,
					"collectionId": "c97db7cd-59c4-7fde-1062-52bcd198bd12"
				},
				{
					"id": "8fd4554a-9377-7cc2-1d6a-2e70f819a06c",
					"headers": "x-api-key: {{api_key_web}}\nx-app-unique-id: {{app_unique_id}}\n",
					"headerData": [
						{
							"key": "x-api-key",
							"value": "{{api_key_web}}",
							"description": "",
							"enabled": true
						},
						{
							"key": "x-app-unique-id",
							"value": "{{app_unique_id}}",
							"enabled": true
						}
					],
					"url": "{{URL}}public/Controller.php",
					"folder": "01c1fc0e-6790-566d-52ad-e65605124859",
					"queryParams": [],
					"preRequestScript": "postman.setEnvironmentVariable(\"id\", randomNumber(2));\r\n\r\n\r\nfunction randomNumber(length) {\r\n  var text = \"\";\r\n  var possible = \"0123456789\";\r\n\r\n  for (var i = 0; i < length; i++)\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n  return text;\r\n}\r\n",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [
						{
							"key": "function_key",
							"value": "RECIPE_SUBMIT",
							"type": "text",
							"enabled": true
						},
						{
							"key": "rcp_nm",
							"value": "TEST_RECIPE_NAME - {{id}}",
							"type": "text",
							"enabled": true
						},
						{
							"key": "food_csn_id",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "food_typ_id",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "user_id",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "rcp_steps[]",
							"value": "TEST STEP !",
							"type": "text",
							"enabled": true
						},
						{
							"key": "rcp_steps[]",
							"value": "TEST STEP 2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_aka_id[]",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_aka_id[]",
							"value": "2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_aka_name[]",
							"value": "TEST INGREDIENT 1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_aka_name[]",
							"value": "TEST INGREDIENT 2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "qty_id[]",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "qty_id[]",
							"value": "2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_qty[]",
							"value": "5",
							"type": "text",
							"enabled": true
						},
						{
							"key": "ing_qty[]",
							"value": "6",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_id[]",
							"value": "1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_id[]",
							"value": "2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_id[]",
							"value": "3",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_qty[]",
							"value": "4",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_qty[]",
							"value": "3",
							"type": "text",
							"enabled": true
						},
						{
							"key": "tst_qty[]",
							"value": "2",
							"type": "text",
							"enabled": true
						},
						{
							"key": "images[]",
							"value": null,
							"type": "file",
							"enabled": true
						},
						{
							"key": "images[]",
							"value": null,
							"type": "file",
							"enabled": true
						}
					],
					"dataMode": "params",
					"tests": "var STATUS_CODE = parseInt(postman.getEnvironmentVariable(\"STATUS_CODE\"));\nvar RESPONSE_TIME = parseInt(postman.getEnvironmentVariable(\"RESPONSE_TIME_LONG\"));\nvar STRING = \"err_message\";\n\ntests[\"Status Code : expected=\"+STATUS_CODE+\" & recieved=\"+responseCode.code] = responseCode.code === STATUS_CODE;\n\ntests[\"Response Time : expected<\"+RESPONSE_TIME+\" & recieved=\"+responseTime] = responseTime < RESPONSE_TIME;\n\ntests[\"Response in JSON : expected=true & recieved=\"+isJson(responseBody)] = isJson(responseBody);\n\ntests[\"Response has String(\"+STRING+\") : expected=true & recieved=\"+responseBody.has(STRING)] = responseBody.has(STRING);\n\nfunction isJson(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nif(isJson(responseBody)){\n    var jsonData = JSON.parse(responseBody);\n    tests[\"Response has error : expected=false & recieved=\"+jsonData.isError] = jsonData.isError === false;\n}",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1524675578247,
					"name": "RECIPE_SUBMIT(ADD)",
					"description": null,
					"collectionId": "c97db7cd-59c4-7fde-1062-52bcd198bd12",
					"responses": []
				},
				{
					"id": "f84f5f6f-3a49-a97d-012d-ad590d07fc50",
					"headers": "x-api-key: {{api_key_web}}\nx-app-unique-id: {{app_unique_id}}\n",
					"headerData": [
						{
							"key": "x-api-key",
							"value": "{{api_key_web}}",
							"description": "",
							"enabled": true
						},
						{
							"key": "x-app-unique-id",
							"value": "{{app_unique_id}}",
							"description": "",
							"enabled": true
						}
					],
					"url": "{{URL}}public/Controller.php",
					"folder": "cd0d701b-52de-ccfc-c084-b4fe08c8e073",
					"queryParams": [],
					"preRequestScript": "postman.setEnvironmentVariable(\"phone\", randomNumber(10));\r\n\r\nfunction randomNumber(length) {\r\n  var text = \"\";\r\n  var possible = \"0123456789\";\r\n\r\n  for (var i = 0; i < length; i++)\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n  return text;\r\n}",
					"pathVariables": {},
					"pathVariableData": [],
					"method": "POST",
					"data": [
						{
							"key": "function_key",
							"value": "USER_UPDATE_IMAGE",
							"type": "text",
							"enabled": true
						},
						{
							"key": "user_id",
							"value": "{{user_id}}",
							"type": "text",
							"enabled": true
						},
						{
							"key": "image[]",
							"value": {
								"0": {}
							},
							"description": "",
							"type": "file",
							"enabled": true
						}
					],
					"dataMode": "params",
					"tests": "var STATUS_CODE = parseInt(postman.getEnvironmentVariable(\"STATUS_CODE\"));\nvar RESPONSE_TIME = parseInt(postman.getEnvironmentVariable(\"RESPONSE_TIME_MEDIUM\"));\nvar STRING = \"err_code\";\n\ntests[\"Status Code : expected=\"+STATUS_CODE+\" & recieved=\"+responseCode.code] = responseCode.code === STATUS_CODE;\n\ntests[\"Response Time : expected<\"+RESPONSE_TIME+\" & recieved=\"+responseTime] = responseTime < RESPONSE_TIME;\n\ntests[\"Response in JSON : expected=true & recieved=\"+isJson(responseBody)] = isJson(responseBody);\n\ntests[\"Response has String(\"+STRING+\") : expected=true & recieved=\"+responseBody.has(STRING)] = responseBody.has(STRING);\n\nfunction isJson(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}",
					"currentHelper": "normal",
					"helperAttributes": {},
					"time": 1524893963415,
					"name": "USER_UPDATE_IMAGE",
					"description": null,
					"collectionId": "c97db7cd-59c4-7fde-1062-52bcd198bd12",
					"responses": []
				}
			]
		},
		{
			"id": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
			"name": "Postman Echo",
			"description": "Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.\n\nThe documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)",
			"order": [],
			"folders": [
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296305,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "09ddd67c-13fe-4626-8dd4-fc64f1fc27b7",
					"name": "Auth: Digest",
					"description": "Digest authentication protects an endpoint with a username and password without actually transmitting the password over network.\nOne has to apply a hash function (like MD5, etc) to the username and password before sending them over the network.\n\n> Username: `postman`\n>\n> Password: `password`\n\nUnlike Basic-Auth, authentication happens using two consecutive requests where the first request returns `401 Unauthorised` along with `WWW-Authenticate` header containing information that needs to be used to authenticate subsequent calls.\n\nTo know more about digest authentication, refer to the [Digest Access Authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#digest-auth) elaborates how to use the same within the Postman app.",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"70ed7920-ead1-2d20-645a-c716ab0fd137",
						"a4c04e32-72cf-0475-07dc-89c23f85cf0c"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:14.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296308,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "df815c41-a76b-4b5b-7129-ea59275f254b",
					"name": "Auth: Others",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"42c867ca-e72b-3307-169b-26a478b00641",
						"2f79ab5b-9029-56c2-7b05-52047790d670",
						"843acf02-a33c-c4bb-d742-c07b9212e4b0"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:14.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296310,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "37368024-f6a8-0f70-85fc-7e876cde9e33",
					"name": "Cookies",
					"description": "The cookie related endpoints allow one to get, set and delete simple cookies.\n\nCookies are small snippets of information that is stored in the browser and sent back to the server with every subsequent requests in order to store useful information between requests.\nIf you want to know more about cookies, read the [HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie) article on wikipedia.",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"3de3b135-b3cc-3a68-ba27-b6d373e03c8c",
						"8dc08eee-a543-7c1c-297f-b0b7040c35c6",
						"a4f24593-448b-88de-963f-eeb952d38a57"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:14.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296313,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "5d3595b3-5e8e-9e33-05ed-855c77298e4e",
					"name": "Headers",
					"description": "The following set of endpoints allow one to see the headers being sent as part of a request and to get a custom set of headers as part of response.\n\nHTTP header fields provide required information about the request or response, or about the object sent in the message body. Both request headers and response headers can be controlled using these endpoints.",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"da16c006-6293-c1fe-ea42-e9ba8a5e68b1",
						"e50f9111-3a52-a325-47f1-fc702bea1fff"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:14.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296200,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"name": "Request Methods",
					"description": "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"078883ea-ac9e-842e-8f41-784b59a33722",
						"1eb1cf9d-2be7-4060-f554-73cd13940174",
						"083e46e7-53ea-87b1-8104-f8917ce58a17",
						"12c51acc-50d2-2d9b-10d6-cc80e3a10d70",
						"8c53212f-42cd-cb37-6e02-08c47a7c8bb1",
						"1f0fad16-6bff-5130-2056-7f4af6b18912"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:13.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296315,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"name": "Utilities",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"6cfd22d8-26cc-7d3e-cf50-16d400211a76",
						"159a89e2-110d-0785-9dd7-9e73b2d6878b",
						"0189572f-509e-efe0-686d-eed4b3d2f1f0",
						"154510d1-65a8-a2d0-f157-aa2c694d7be7",
						"fd961ad0-ab24-68d8-4be5-573e8585d526",
						"5d3b31c0-fa26-ee03-5c1b-3715825d811d",
						"39a204d5-944a-59d3-2dfe-90fd378cc3da"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:14.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296317,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"name": "Utilities / Date and Time",
					"description": "A set of `/time/*` mounted requests to perform date-time manipulations, among other operations.\n",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"2881587c-bd9f-0ed1-7c31-525e4ed5306c",
						"54dfe6f2-5887-1078-1f3c-3cf36acc648e",
						"c38e8be7-1739-2108-1804-a8b171c75298",
						"f922a99e-6e96-ded7-ac6f-3ca6f958987d",
						"4cef08e8-75d3-2a31-e703-115cf976e75e",
						"b4a2e234-3b0c-1a3e-14f8-5cafd567ee08",
						"4dc695e5-6b1e-1edf-c68d-014139c59d7e",
						"e8a83301-4e86-1e6c-e88c-2cbedc1524d6",
						"b709b99c-3347-40fc-2c21-98ceb7f9e267",
						"47f089f3-196e-fb13-fdf6-1d62f85ad96f",
						"8cc2e733-7e68-8ad8-efd1-5393510a300a",
						"1ef02347-9a4d-5d6a-1b75-144dd6de641f"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:14.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481296319,
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"folder": null,
					"id": "084b21bd-d250-180b-5ed8-94cfaca39fdd",
					"name": "Utilities / Postman Collection",
					"description": "",
					"variables": null,
					"auth": null,
					"events": null,
					"order": [
						"fffc59d5-1e2d-ccc8-2101-2f7b9216be40",
						"dc8d6e30-c1cf-9d98-4b95-fc1ca6196511"
					],
					"folders_order": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
					"updatedAt": "2018-03-23T14:07:14.000Z",
					"write": true,
					"collection_id": "f695cab7-6878-eb55-7943-ad88e1ccfd65"
				}
			],
			"folders_order": [
				"09ddd67c-13fe-4626-8dd4-fc64f1fc27b7",
				"df815c41-a76b-4b5b-7129-ea59275f254b",
				"37368024-f6a8-0f70-85fc-7e876cde9e33",
				"5d3595b3-5e8e-9e33-05ed-855c77298e4e",
				"9a4c3bce-30f7-a496-c9ec-78afecbf1545",
				"930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
				"74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
				"084b21bd-d250-180b-5ed8-94cfaca39fdd"
			],
			"timestamp": 0,
			"synced": true,
			"remote_id": "0",
			"owner": "833319",
			"sharedWithTeam": false,
			"subscribed": false,
			"remoteLink": "",
			"remoteLinkUpdatedAt": null,
			"public": false,
			"createdAt": "2018-03-23T14:07:11.000Z",
			"updatedAt": "2018-03-23T14:07:14.000Z",
			"write": true,
			"published": false,
			"favorite": false,
			"permissions": {},
			"syncedPermissions": {},
			"requests": [
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295895,
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "0189572f-509e-efe0-686d-eed4b3d2f1f0",
					"name": "Delay Response",
					"dataMode": "params",
					"data": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"response body has key delay\"] = 'delay' in responseJSON;",
									"}",
									"catch (e) { }",
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": [],
					"url": "https://postman-echo.com/delay/3",
					"preRequestScript": null,
					"tests": "var responseJSON;\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests[\"response body has key delay\"] = 'delay' in responseJSON;\n}\ncatch (e) { }\ntests[\"response code is 200\"] = responseCode.code === 200;\n",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true,
					"responses": [
						{
							"owner": "833319",
							"lastUpdatedBy": "833319",
							"lastRevision": 3481296168,
							"request": {
								"url": "https://echo.getpostman.com/delay/3",
								"headers": [],
								"data": [],
								"method": "GET",
								"dataMode": "params"
							},
							"id": "64f3f9f5-e3ca-9cdd-590c-88820be2f442",
							"name": "success-response",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "4769",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "13",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 02 Jan 2017 09:19:03 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://echo.getpostman.com/delay/3",
									"name": "sails.sid",
									"value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ",
									"domain": "echo.getpostman.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "{\"delay\":\"3\"}",
							"language": "json",
							"rawDataType": null,
							"requestObject": "{\"url\":\"https://echo.getpostman.com/delay/3\",\"headers\":[],\"data\":[],\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2018-03-23T14:07:13.000Z",
							"updatedAt": "2018-03-23T14:07:13.000Z",
							"write": true
						}
					]
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295888,
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "078883ea-ac9e-842e-8f41-784b59a33722",
					"name": "GET Request",
					"dataMode": "params",
					"data": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response json contains headers'] = _.has(responseJSON, 'headers');",
									"tests['response json contains args'] = _.has(responseJSON, 'args');",
									"tests['response json contains url'] = _.has(responseJSON, 'url');",
									"",
									"tests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);",
									"tests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === \"123\");"
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": [],
					"url": "https://postman-echo.com/get?test=123",
					"preRequestScript": null,
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\ntests['response json contains headers'] = _.has(responseJSON, 'headers');\ntests['response json contains args'] = _.has(responseJSON, 'args');\ntests['response json contains url'] = _.has(responseJSON, 'url');\n\ntests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);\ntests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === \"123\");",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [
						{
							"key": "test",
							"value": "123"
						}
					],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295889,
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "083e46e7-53ea-87b1-8104-f8917ce58a17",
					"name": "POST Form Data",
					"dataMode": "urlencoded",
					"data": [
						{
							"key": "strange",
							"value": "boom",
							"type": "text",
							"enabled": true
						}
					],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has post data'] = _.has(responseJSON, 'form');",
									"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
					"variables": null,
					"headers": "Content-Type: application/x-www-form-urlencoded\n",
					"method": "POST",
					"pathVariables": [],
					"url": "https://postman-echo.com/post",
					"preRequestScript": null,
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has post data'] = _.has(responseJSON, 'form');\ntests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/x-www-form-urlencoded"
						}
					],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295890,
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "12c51acc-50d2-2d9b-10d6-cc80e3a10d70",
					"name": "PUT Request",
					"dataMode": "raw",
					"data": "Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.",
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has PUT data'] = _.has(responseJSON, 'data');",
									"tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
								]
							}
						}
					],
					"descriptionFormat": null,
					"description": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
					"variables": null,
					"headers": "",
					"method": "PUT",
					"pathVariables": [],
					"url": "https://postman-echo.com/put",
					"preRequestScript": null,
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has PUT data'] = _.has(responseJSON, 'data');\ntests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295896,
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "154510d1-65a8-a2d0-f157-aa2c694d7be7",
					"name": "Get UTF8 Encoded Response",
					"dataMode": "params",
					"data": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": [],
					"url": "https://postman-echo.com/encoding/utf8",
					"preRequestScript": null,
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295897,
					"folder": "930f54b4-c5cd-2363-7cf5-b9022d3c0aae",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "159a89e2-110d-0785-9dd7-9e73b2d6878b",
					"name": "Streamed Response",
					"dataMode": "params",
					"data": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"tests[\"response is sent in chunks\"] = (postman.getResponseHeader('Transfer-Encoding') === 'chunked')",
									""
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": [],
					"url": "https://postman-echo.com/stream/10",
					"preRequestScript": null,
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;\ntests[\"response is sent in chunks\"] = (postman.getResponseHeader('Transfer-Encoding') === 'chunked')\n",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295891,
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "1eb1cf9d-2be7-4060-f554-73cd13940174",
					"name": "POST Raw Text",
					"dataMode": "raw",
					"data": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.",
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has post data'] = _.has(responseJSON, 'data');",
									"tests['response matches the data posted'] = (responseJSON.data && responseJSON.data.length === 256);",
									"",
									"tests[\"content-type equals text/plain\"] = responseJSON && responseJSON.headers && (responseJSON.headers[\"content-type\"] === 'text/plain');"
								]
							}
						}
					],
					"descriptionFormat": null,
					"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
					"variables": null,
					"headers": "Content-Type: text/plain\n",
					"method": "POST",
					"pathVariables": [],
					"url": "https://postman-echo.com/post",
					"preRequestScript": null,
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has post data'] = _.has(responseJSON, 'data');\ntests['response matches the data posted'] = (responseJSON.data && responseJSON.data.length === 256);\n\ntests[\"content-type equals text/plain\"] = responseJSON && responseJSON.headers && (responseJSON.headers[\"content-type\"] === 'text/plain');",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295905,
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "1ef02347-9a4d-5d6a-1b75-144dd6de641f",
					"name": "Leap year check",
					"dataMode": "params",
					"data": null,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Comparsion was correct\"] = JSON.parse(responseBody).leap === true;"
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": [],
					"url": "https://postman-echo.com/time/leap?timestamp=2016-10-10",
					"preRequestScript": null,
					"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Comparsion was correct\"] = JSON.parse(responseBody).leap === true;",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [
						{
							"key": "timestamp",
							"value": "2016-10-10"
						}
					],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295892,
					"folder": "9a4c3bce-30f7-a496-c9ec-78afecbf1545",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "1f0fad16-6bff-5130-2056-7f4af6b18912",
					"name": "DELETE Request",
					"dataMode": "raw",
					"data": "Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus.\nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.",
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"tests['response has PUT data'] = _.has(responseJSON, 'data');",
									"tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
								]
							}
						}
					],
					"descriptionFormat": null,
					"description": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
					"variables": null,
					"headers": "",
					"method": "DELETE",
					"pathVariables": [],
					"url": "https://postman-echo.com/delete",
					"preRequestScript": null,
					"tests": "var responseJSON;\n\ntry { \n    responseJSON = JSON.parse(responseBody); \n    tests['response is valid JSON'] = true;\n}\ncatch (e) { \n    responseJSON = {}; \n    tests['response is valid JSON'] = false;\n}\n\n\ntests['response has PUT data'] = _.has(responseJSON, 'data');\ntests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295908,
					"folder": "74a8adf0-4f3f-068a-7c35-9745aa7b57d1",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "2881587c-bd9f-0ed1-7c31-525e4ed5306c",
					"name": "Current UTC time",
					"dataMode": "params",
					"data": null,
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Time is in a valid format\"] = responseBody === postman.getResponseHeader(\"date\");",
									""
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": "html",
					"description": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": [],
					"url": "https://postman-echo.com/time/now",
					"preRequestScript": null,
					"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Time is in a valid format\"] = responseBody === postman.getResponseHeader(\"date\");\n",
					"currentHelper": null,
					"helperAttributes": null,
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:12.000Z",
					"updatedAt": "2018-03-23T14:07:12.000Z",
					"collectionId": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"write": true,
					"responses": [
						{
							"owner": "833319",
							"lastUpdatedBy": "833319",
							"lastRevision": 3481296172,
							"request": {
								"url": "https://postman-echo.com/time/now",
								"headers": [],
								"data": null,
								"method": "GET",
								"dataMode": "params"
							},
							"id": "f3f2053b-e446-a8b1-aee2-124618275f94",
							"name": "time as text",
							"status": "",
							"responseCode": {
								"code": 200,
								"name": "OK",
								"fromServer": true
							},
							"time": "749",
							"headers": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "49",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 11 Jan 2017 10:27:12 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"1d-2jJhkzratfVX9VZ0+raHbw\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx/1.10.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig; Path=/; HttpOnly",
									"name": "set-cookie",
									"description": ""
								}
							],
							"cookies": [
								{
									"url": "https://postman-echo.com/time/now",
									"name": "sails.sid",
									"value": "s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig",
									"domain": "postman-echo.com",
									"secure": false,
									"httpOnly": true,
									"expirationDate": 2147463847,
									"path": "/"
								}
							],
							"mime": "",
							"text": "Wed, 11 Jan 2017 10:27:12 GMT",
							"language": "html",
							"rawDataType": null,
							"requestObject": "{\"url\":\"https://postman-echo.com/time/now\",\"headers\":[],\"data\":null,\"method\":\"GET\",\"dataMode\":\"params\"}",
							"createdAt": "2018-03-23T14:07:13.000Z",
							"updatedAt": "2018-03-23T14:07:13.000Z",
							"write": true
						}
					]
				},
				{
					"owner": "833319",
					"lastUpdatedBy": "833319",
					"lastRevision": 3481295876,
					"folder": "df815c41-a76b-4b5b-7129-ea59275f254b",
					"collection": "f695cab7-6878-eb55-7943-ad88e1ccfd65",
					"id": "2f79ab5b-9029-56c2-7b05-52047790d670",
					"name": "OAuth1.0 Verify Signature",
					"dataMode": "params",
					"data": [
						{
							"key": "code",
							"value": "xWnkliVQJURqB2x1",
							"type": "text",
							"enabled": true
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text",
							"enabled": true
						},
						{
							"key": "redirect_uri",
							"value": "https://www.getpostman.com/oauth2/callback",
							"type": "text",
							"enabled": true
						},
						{
							"key": "client_id",
							"value": "abc123",
							"type": "text",
							"enabled": true
						},
						{
							"key": "client_secret",
							"value": "ssh-secret",
							"type": "text",
							"enabled": true
						}
					],
					"auth": {
						"type": "oauth1",
						"oauth1": [
							{
								"key": "consumerKey",
								"value": "RKCGzna7bv9YD57c",
								"type": "string"
							},
							{
								"key": "consumerSecret",
								"value": "D+EdQ-gs$-%@2Nu7",
								"type": "string"
							},
							{
								"key": "token",
								"value": "",
								"type": "string"
							},
							{
								"key": "tokenSecret",
								"value": "",
								"type": "string"
							},
							{
								"key": "signatureMethod",
								"value": "HMAC-SHA1",
								"type": "string"
							},
							{
								"key": "timestamp",
								"value": 1472121255,
								"type": "number"
							},
							{
								"key": "nonce",
								"value": "e5VR16",
								"type": "string"
							},
							{
								"key": "version",
								"value": "1.0",
								"type": "string"
							},
							{
								"key": "realm",
								"value": "",
								"type": "string"
							},
							{
								"key": "addParamsToHeader",
								"value": true,
								"type": "boolean"
							},
							{
								"key": "autoAddParam",
								"type": "any"
							},
							{
								"key": "addEmptyParamsToSign",
								"value": false,
								"type": "boolean"
							}
						]
					},
					"events": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"var body = JSON.parse(responseBody);",
									"tests[\"Body contains status pass\"] = body[\"status\"] == \"pass\""
								]
							}
						}
					],
					"rawModeData": null,
					"descriptionFormat": null,
					"description": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
					"variables": null,
					"headers": "",
					"method": "GET",
					"pathVariables": [],
					"url": "https://postman-echo.com/oauth1",
					"preRequestScript": null,
					"tests": "tests[\"response code is 200\"] = responseCode.code === 200;\nvar body = JSON.parse(responseBody);\ntests[\"Body contains status pass\"] = body[\"status\"] == \"pass\"",
					"currentHelper": "oAuth1",
					"helperAttributes": {
						"id": "oAuth1",
						"consumerKey": "RKCGzna7bv9YD57c",
						"consumerSecret": "D+EdQ-gs$-%@2Nu7",
						"token": "",
						"tokenSecret": "",
						"signatureMethod": "HMAC-SHA1",
						"timestamp": 1472121255,
						"nonce": "e5VR16",
						"version": "1.0",
						"realm": "",
						"header": true,
						"includeEmpty": false
					},
					"queryParams": [],
					"headerData": [],
					"pathVariableData": [],
					"createdAt": "2018-03-23T14:07:11.000Z",
		